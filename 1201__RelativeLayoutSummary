// 总结一下相对布局relativelayout的各种布置的区别

relativelayout总的来说分为几个大的部分
1.根据父控件进行定位的属性
  alignParentLeft //对齐父控件的左边缘
  alignParentRight //对齐父控件的右边缘
  alignParentTop //对齐父控件的上边缘
  alignParentBottom //对齐父控件的下边缘
  centerHorizontal  //水平居中放置控件
  centerVertical  //垂直居中放置控件
  centerInParent  //居中放置控件
  
2.根据同一父控件下的兄弟控件进行布局
  alignTop  //对齐参考组件的上边缘
  alignBottom  //对齐参考组件的下边缘
  alignRight  //对齐参考组件的右边缘
  alignLeft  //对齐参考组件的左边缘
  
  toLeftOf  //在参考组件的左边
  toRightOf  //在参考组件的右边
  above  //在参考组件的上方
  below  //在参考组件的下方
  
3.内边距和外边距 margin and padding,单位 dp
  margin  //子控件和父控件之间的距离,包括上下左右,当一个组件设置了该属性，则下面的属性都无效了
  marginLeft  //与父控件左边缘的距离
  marginRight  //与父控件右边缘的距离
  marginTop  //与父控件上边缘的距离
  marginBottom  //与父控件下边缘的距离
  
  padding  //组件中text内容与组件自身边界的距离,与margin一样，一旦设置，单个属性全部无效
  paddingLeft  //增加左内距
  paddingRight  //增加右内距
  paddingTop  //增加上内距
  paddingBottom  //增加下内距
  
  设置居中效果还有一个gravity属性
  
  以上。个人总结
=====================

关于margin的设置
一般我们习惯性的会将margin的值设置为正整数，但其实margin的值可以为负数。
我们在网页中经常看到那些右上角有X的图片都是这个原理

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#00CCCCFF"
    xmlns:tools="http://schemas.android.com/tools"
     >
     <ImageView 
         android:id="@+id/imgBack"
         android:layout_width="200dp"
         android:layout_height="200dp"
         android:layout_centerInParent="true"
         android:background="@drawable/myicon"/>
     
     <ImageView 
         android:id="@+id/imgcancel"
         android:layout_width="28dp"
         android:layout_height="28dp"
         android:layout_marginRight="-10dp"
         android:layout_marginTop="-15dp"
         android:background="@drawable/cancel"
         android:layout_alignRight="@+id/imgBack"
         android:layout_alignTop="@+id/imgBack"/>
    

</RelativeLayout>

//实现点击关闭效果
新建一个class
public class adactivity extends Activity{
	
	private ImageView imageview;
	
	@Override
	protected void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setContentView(R.layout.adactivity_main);
		imageview = (ImageView)findViewById(R.id.imgcancel);
		imageview.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				finish();
			}
		});
	}
}

//在原来的mainactivity中添加

public class MainActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        final Intent i = new Intent(MainActivity.this,adactivity.class);
        Thread thread = new Thread(){
        	public void run(){
        		try{
        			sleep(2000);
        			startActivity(i);
        		}catch(InterruptedException e){
        			e.printStackTrace();
        		}
        	}
        };
        thread.start();
    }
}

//最后，最重要的，在AndroidManifest.xml文件中进行新activity的注册.否则会报错，APP也无法启动
<activity android:name="com.example.justfortest.adactivity" android:theme="@style/AppBaseTheme" />
